package mcp

import (
	"context"
	"fmt"
	"log"

	"ai-presence-mcp/pkg/types"

	sdkmcp "github.com/modelcontextprotocol/go-sdk/mcp"
)

type Server struct {
	mcpServer *sdkmcp.Server
}

type Tool interface {
	Name() string
	Description() string
	InputSchema() interface{}
	Execute(args map[string]interface{}) (*types.ToolResult, error)
}

func NewServer() *Server {
	log.Printf("Creating new MCP server...")

	mcpServer := sdkmcp.NewServer(&sdkmcp.Implementation{
		Name:    "ai-presence-mcp",
		Title:   "AI Presence MCP Server",
		Version: "0.1.0",
	}, &sdkmcp.ServerOptions{
		Instructions: "AI Presence automation server providing email management and other productivity tools.",
		InitializedHandler: func(ctx context.Context, req *sdkmcp.InitializedRequest) {
			log.Printf("MCP client initialized!")
		},
	})

	log.Printf("MCP server created successfully")
	return &Server{
		mcpServer: mcpServer,
	}
}

func (s *Server) RegisterTool(tool Tool) {
	log.Printf("Registering tool: %s", tool.Name())

	toolDef := &sdkmcp.Tool{
		Name:        tool.Name(),
		Description: tool.Description(),
		// InputSchema will be auto-generated by Go SDK
	}

	// Create properly typed handler function
	handler := func(ctx context.Context, req *sdkmcp.CallToolRequest, args map[string]interface{}) (*sdkmcp.CallToolResult, any, error) {
		log.Printf("Tool '%s' called with args: %+v", tool.Name(), args)

		result, err := tool.Execute(args)
		if err != nil {
			log.Printf("Tool '%s' error: %v", tool.Name(), err)
			return &sdkmcp.CallToolResult{
				Content: []sdkmcp.Content{&sdkmcp.TextContent{Text: fmt.Sprintf("Error: %v", err)}},
				IsError: true,
			}, nil, nil
		}

		// Convert our internal result format to MCP format
		var content []sdkmcp.Content
		for _, c := range result.Content {
			content = append(content, &sdkmcp.TextContent{Text: c.Text})
		}

		isError := result.IsError != nil && *result.IsError
		mcpResult := &sdkmcp.CallToolResult{
			Content: content,
			IsError: isError,
		}

		log.Printf("Tool '%s' completed successfully", tool.Name())
		return mcpResult, nil, nil
	}

	// Use the global AddTool function with proper type parameters
	sdkmcp.AddTool(s.mcpServer, toolDef, handler)
	log.Printf("Successfully registered tool: %s", tool.Name())
}

func (s *Server) Run(ctx context.Context, transport sdkmcp.Transport) error {
	log.Printf("Starting MCP server with transport...")
	return s.mcpServer.Run(ctx, transport)
}
